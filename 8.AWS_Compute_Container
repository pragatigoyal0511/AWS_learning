AWS : Containers - one of the category of Virtual machines like EC2, containers and serverless. here, we will look for Containers.


Why EC2 was not sufficient? why need to Containers came?
In case of EC2, when we launch EC2 instance, we have the full virtual machine which will host our application which already has an operating system installed.
Then we install: 
1. Python (if our app needs) jaise we saw when we launch ec2 instance in demo, we saw that user script mein sab likha tha ki yahan se zip of our application download karo,unzip karo,
python install karo etc..

2. any libraries which our app requires
3. our application code


EC2= [Full OS + Python + Your app] - this becomes very heavy..


so, in ec2 -> It has its own operating system (Ubuntu, Amazon Linux, etc.)

You can install anything on it (Python, Node.js, DB, etc.)
You have full control
So yes — you can run apps on EC2 directly.


Now, what is the problem with EC2, which containers solve?

With EC2, deploying apps is heavy - since full operating system, libraries and app code - GB of data. It slower to start (takes minutes to boot whereas for containers seconds )
,Each app often needs a separate EC2.
if we have 10 app, since aajkal multiple services hoti hain , then 10 EC2 instances.

Whereas containers,
Instead of giving each app a whole OS, containers:
Share the same host OS kernel
Only isolate the app + its dependencies
Start in seconds, not minutes
Use fewer resources


In case of containers - it is very light weight- it is like pack everything required to run a app in an container and now run it anywhere.
run multiple containers on same ec2 instance and they will run independently


Now, the question arises, 
Q1.how come container is light weight? 
Q2. What is meant by you can run anywhere as in container and ebverywhere it would behave the same? why can't this be true in case of ec2.
Q3. can't we run multiple apps on 1 ec2 instance just like we run mukltiple applications using containers in 1 ec2 instance?


Q1.how come container is light weight? 
Ans 1. Containers are jo app ko run karne ke liye chahyea dependecies,libraries, application code, os image -> sabko ek container mei pack kardo.
ye light weight isliye hojata hai kyonki yahan hum OS ki image daal rahe hain..not the complete OS. Image is just 200-300 MB whwereas complete OS is in GBs.

ye image kya hai? poore os mein kya hota hai? kya isko fir like ubuntu ki os version dala toh jis system pe dala uspe poora ubuntu nahin chahayea?
container =
[Your app + its dependencies + a tiny OS layer]

Why Containers Don’t Need a Full OS

Because the main part of the OS that talks to hardware (called kernel) is shared between all containers on the same machine.
Each container only brings the minimal part it needs (commands, libraries, etc.) — This is the image
not the entire OS.

Full Ubuntu = Kernel + User Space
So, in containers we have user space -- All the tools and libraries users interact with eg commands like ls, apt etc..
Containers share the kernel from the host machine. And therefore yes, of we have ubuntu image in container then it would work with any machine with linux kernel be it debbian
ubuntu, linux etc.. but not on windows..
meri undersytanding mein computer ke hardware se baat karne wala environment toh hogaya kernel.. and user space ho gaya language jismein sabki apni apni commands hain..

Q2. What is meant by you can run anywhere as in container and ebverywhere it would behave the same? why can't this be true in case of ec2.
Ans. Yes, beacuse container has everything in 1 pacakage which app requires to run. I would behave the same. 


When you say “app”, it needs:

A certain version of Python or Node.js
Some libraries
A certain OS version
Environment variables or configurations

If you run that app on:
Your laptop (Windows)
A test server (Linux)
AWS (different Linux version)

➡️ Sometimes it fails — because something is slightly different between environments.

This is called the “It works on my machine” problem 😅

Containers solve this.

They say:

“Don’t depend on what the machine already has.
Pack everything the app needs inside one small box — and run that box anywhere.”

That small box = container.

It includes:
Your app code
Its dependencies
Configurations
Runtime environment

So whether you run it:
On your laptop
On AWS EC2
On Google Cloud
On any server

It runs exactly the same, because the box carries everything it needs inside.

Containers share the kernel from the host machine. And therefore yes, of we have ubuntu image in container then it would work with any machine with linux kernel be it debbian
ubuntu, linux etc.. but not on windows..

Toh we can run it anywhere, sabkuch ek pacakage mein hai jo bhi app ko chahyea all will have the same. Otherwise ho sakta hai slighly diff verison ke karan mere laptop pe chale and kahin aur na cahle.


Q3. can't we run multiple apps on 1 ec2 instance just like we run mukltiple applications using containers in 1 ec2 instance?
Ans.
Ab let suppose meri application 2 servoices se bani
one working with Python version 11.x
Another working with Python 12.x

Now, in case of ec2..whan mujhe oS milta hai, and baaki apan khud install karte hain.. 2 alag alag version daale python ke
same machine mein cahalne ke liye kuch problems aasakti hun due to conflicting verisons, toh better hai alag alag ec2 instance use karlein

But agar container use kia toh ek app mein oython 11.x pacakage kar dia and doose mein 12.x, kabhi kuch updates bhi kiye toh dono mein apne apne
dono isloated hain, koi interference nahin hai, dono badhiya se cahalenge ek hi EC2 instance mein




-> what is kernel and user space is like ?
💡 Analogy: The Restaurant 🍽️
Role	                   OS Term	        Example
🧑‍🍳 Chef in the kitchen	Kernel	       Handles actual cooking (hardware work)
👩‍💼 Waiter            	System call	     Passes orders safely between customer and chef
🧍 Customer	         User space (apps) Makes requests (“I want food!”)

Customers (apps) can’t enter the kitchen directly (can’t touch hardware).

They tell the waiter (system call).
The waiter asks the chef (kernel) to do it safely.
This separation prevents chaos (apps from crashing or damaging hardware).

-> why can't we use windows user space with linux kernal?
 because the “contract” between user space and kernel — called system calls — are completely different.

| Part                                     | Linux                                                   | Windows                                               |
| ---------------------------------------- | ------------------------------------------------------- | ----------------------------------------------------- |
| **Kernel type**                          | Linux kernel (open-source, Unix-style)                  | Windows NT kernel (closed-source, Microsoft-specific) |
| **System calls (API to talk to kernel)** | POSIX system calls (e.g., `fork()`, `exec()`, `open()`) | Windows API (e.g., `CreateProcess`, `ReadFile`, etc.) |
| **User space**                           | GNU tools, bash, apt, etc.                              | Windows tools, registry, explorer.exe, etc.           |

So — each system speaks a different language between the user space and kernel.




->Amazon ECS and Amazon EKS

If you’re trying to manage your compute at a large scale, you should consider the following:

•How to place your containers on your instances
•What happens if your container fails
•What happens if your instance fails
•How to monitor deployments of your containers

This coordination is handled by a container orchestration service.
AWS offers two container orchestration services: Amazon Elastic Container Service (Amazon ECS) and Amazon Elastic Kubernetes Service (Amazon EKS).


-> why now requirement of ECS and eks came?
The Problem: Managing Many Containers

Imagine you’re a developer running:

1 container → easy.
100 containers → hard!

You now need to handle:
Where to run each container (on which EC2?)
Restart if one crashes.
Scale up/down automatically.
Load balancing (distribute traffic evenly).
Update containers with zero downtime.

You could try to do all this manually — but it’s a nightmare.
That’s why we need container orchestration systems.

🧭 Enter Container Orchestration

“Orchestration” means — a tool that automatically:

Launches containers.
Schedules them on the right servers.
Restarts if something fails.
Monitors health and scaling.

There are two main orchestrators in AWS world:
Amazon ECS (Elastic Container Service)
Amazon EKS (Elastic Kubernetes Service)

Let’s understand both in plain language 👇

1. ECS
A fully managed container orchestration service by AWS.

ECS automatically:

Launches containers (based on Docker images).
Decides where to place them (on EC2 or Fargate).
Restarts if they crash.
Scales up/down as needed.

🔹 You define:

What containers to run (in a task definition).
How many copies (replicas).
What CPU/memory each needs.
Then ECS handles the rest.

🔹 How It Runs:

You can run ECS containers on:
EC2 instances (you manage the servers), or
AWS Fargate (serverless — AWS manages everything underneath).

🧠 Think of ECS as:

AWS’s simpler, integrated solution for container orchestration (managing container services).


2. EKS

A managed Kubernetes service by AWS.
Kubernetes (K8s) is an open-source container orchestrator — created by Google, used worldwide.

What It Does:

Kubernetes can do the same as ECS — scheduling, scaling, healing containers —
but it’s not AWS-specific.
You can run Kubernetes anywhere — AWS, Azure, Google Cloud, or on-premises.

EKS = AWS runs and manages the Kubernetes control plane for you.

You just define:
Pods (containers),
Deployments,
Services,
and EKS takes care of running them.


Example Scenario

Say you want to deploy your Python web app as containers.
You can:

Create Docker image of your app.
Push it to Amazon ECR (Elastic Container Registry).

Then choose:
Use ECS to run it easily on AWS.
Or use EKS if you already use Kubernetes tools.

