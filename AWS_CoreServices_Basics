1. Compute

Amazon Elastic Compute Cloud (Amazon EC2) provides scalable computing capacity in the Amazon Web Services (AWS) Cloud. In the compute area, there are various options for the types of resources you might want to launch, such as the following:

Virtual machines
Containers
Batch processing compute resources
Serverless compute

->EC2 - Elastic Compute Cloud: Amazon EC2 is a service from AWS that lets you create virtual computers (servers) on the internet — whenever you want, for as long as you want.


Imagine you want to run a website or an app.

Normally, you’d have to:
Buy a computer (server)
Install Linux or Windows
Set up software
Keep it running 24/7

With Amazon EC2, you just:
Go to the AWS console
Click “Launch EC2 Instance”
Choose how powerful you want the computer to be (RAM, CPU, etc.)
And boom — in less than a minute, you have a running virtual computer online.

You can connect to it just like your own computer and run anything — website, app, database, etc.

Elastic : because its capacity can be increased or decreased. We only pay as we use, just like paying for electricity.
CLoud: This computer availble on cloud, online
Compute : This is computational server. Cloud-based computing power


Real-world comparison:

It’s like renting a hotel room (computer) instead of buying a house (server).
You can rent it for 1 hour or 1 year.
Choose the size you want.
Leave anytime.
You don’t worry about maintenance — Amazon handles that.



->Serverless compute with AWS Lambda

AWS Lambda is a service that lets you run your code without needing to manage any servers.

You just write your code → upload it to AWS → and AWS runs it automatically when needed.

👉 You don’t create or manage EC2 instances (computers).
👉 You don’t worry about scaling or maintenance — AWS handles that.
👉 You only pay when your code actually runs.

That’s why it’s called “serverless compute” —
you still use servers, but AWS manages them behind the scenes, so you don’t have to.

💡 Simple Example:

Let’s say you want to run some code every time a user uploads a photo to your app.

Without Lambda (using EC2):
You’d have to keep an EC2 server running 24/7 to detect uploads and process them.
You pay even when no one is uploading.

With Lambda:
You just write a function (say, resizeImage())
Connect it to the photo upload event (like S3 bucket trigger)
Whenever someone uploads a photo, Lambda automatically runs your code.
When it’s done, it stops — and you only pay for the few seconds it ran.

🧩 So how is Lambda related to Compute Services?

AWS has a family of Compute services —
all of them provide computing power, but in different ways:

Service	Description	You manage servers?	Example use
EC2	Virtual machines (you control everything)	✅ Yes	Host websites, apps
ECS / EKS	Containers (you manage container clusters)	⚙️ Partially	Microservices, Docker
Lambda	Serverless compute (just upload code)	❌ No	Small functions, automation, event-driven tasks

So, Lambda is part of AWS Compute Services, but it’s the most hands-free one — you just focus on the code, not the infrastructure.

🧠 In short:
Concept	Meaning
AWS Lambda	Run your code without managing servers
Type	Serverless compute service
You pay for	Only the time your code runs (per millisecond)
Main benefit	No server setup, auto scaling, cost-efficient


We will now explore serverless application use cases. Web applications, data processing applications,
chatbots, and IT automation are all kinds of solutions that can be run on serverless technologies.


->container

A container is like a small box that holds everything which your application requires to run like code,libraries,settings etc..

Container Orchestration means: like a traffic controller or like manager who manages these containers, ki ye kin EC2 instances pe 
deploy honge, to check if they are healthy, to monitor them, if needed add extra, if not required remove to save cost, start/stop/restart automatically
and make sure everything is healthy. This is container orchestration.

AWS sercices which do this container orchestration are:
1. ECS : Elastic Container Service - AWS’s own orchestration system — simple, fully managed by AWS.
2. EKS : Elastic Kubernetes Service- A managed version of Kubernetes, an open-source orchestration tool used worldwide.

Both ECS and EKS help you:

Schedule your containers → Decide which EC2 machine should run each one.
Maintain them → Restart or replace if a container crashes.
Scale → Add more containers or EC2 machines when traffic increases.
Monitor → Check container health, performance, and logs from one place.
Control → Set rules (how many copies of each container, what memory, etc.)

💬 In simple words:
ECS and EKS are like smart managers who make sure all your containers are always running smoothly, automatically, and efficiently.



2. Storage

Storage in AWS is all about saving and retrieving data reliably, durably, and efficiently.
AWS offers multiple storage options depending on your needs (object, block, file, archival, etc.).

1. -> Object storage - Amazon S3
Use case: Storing files, backups, images, videos, logs, static websites.
Key points:

S3 = Simple Storage Service
Stores objects (files) in buckets


Amazon S3 is a scalable object storage service.
It lets you store and retrieve any amount of data (images, videos, backups, logs, etc.) from anywhere over the internet.

Think of it like a massive online hard drive managed entirely by AWS — but instead of folders and files, it uses buckets and objects.

Core Concepts
1. Buckets

A bucket is like a folder that stores your data (objects).
Every file (object) must belong to one bucket.

Each bucket has a unique name globally (not just in your account).
Example: myapp-photos-bucket

2. Objects

The actual data you store — files like images, videos, documents, logs, etc.
Each object has:
Key (the file name or path)
Value (the data)
Metadata (info about the object)
Version ID (if versioning is enabled)

Example:
Bucket: myapp-photos
Object Key: 2025/vacation/photo1.jpg


how does it work?
We create bucket. We upload file into that bucket.
We can access and download them using AWS console, Rest APIs 


Now, Amazon S3 offers multiple storage classes. Bascically, hamare usage ke hisab se alag alag storage options hain ki how often we want to access
data and acordingly we pay.


1. S3 Standard - used when we want to store frequently accessed data and want frequent retrieval 
Example: websites, active apps, frequent reads/writes.
Here, data is stored accross multiple AZs.

2. S3 IA - Intelligent tiering (Auto cost optimization)- when we are not sure how often we would have to access data, but when we have to access it
it should be quick retrieval

So, the data AWS automatically moves objects between different access tiers

Eg: logs, reports, user-generated data.

3. Standard IA : Infrequent access : Data you access rarely but need to retrieve quickly when required.
Best for: Backups, disaster recovery, old project files

4. S3 One Zone-IA : Infrequent access, but not critical data (okay if lost if one AZ fails). 
Data is stored in single availability zones.
Best for: Secondary backups, easily reproducible data, non-critical logs.

5. S3 Glacier : Archival data — you rarely access it (e.g., yearly backups).
Retrieval takes minutes to hours (depending on retrieval option)
Best for: Historical data, regulatory archives, old media.

6. S3 Glacier Deep Archive: Long-term cold storage (you might never access it).
Retrieval takes hours (up to 12 hours)
Best for: Legal records, long-term archives, inactive backups.


| Storage Class               | Access Frequency | Availability | Cost        | Retrieval Speed  | Typical Use          |
| --------------------------- | ---------------- | ------------ | ----------- | ---------------- | -------------------- |
| **S3 Standard**             | Frequent         | 99.99%       | 💰💰        | Immediate        | Active data          |
| **S3 Intelligent-Tiering**  | Variable         | 99.9–99.99%  | 💰→💵       | Immediate        | Unpredictable access |
| **S3 Standard-IA**          | Infrequent       | 99.9%        | 💵          | Immediate        | Backups              |
| **S3 One Zone-IA**          | Infrequent       | 99.5%        | 💵          | Immediate        | Non-critical data    |
| **S3 Glacier**              | Rare             | 99.99%       | 💵          | Minutes–Hours    | Archives             |
| **S3 Glacier Deep Archive** | Very Rare        | 99.99%       | 💵 (lowest) | Hours (up to 12) | Long-term archives   |



2. -> AWS Elastic Block storage:
EBS = Block-level storage for EC2 instances.

👉 Think of each EBS volume as a virtual hard drive attached to a cloud server (EC2).

What type of data is stored in EBS?
Operating system files (boot volume for EC2)
Databases (like MySQL, PostgreSQL)
Application data that needs fast read/write
Temporary data (logs, cache, transactions)

Why EBS (and not S3)?
EC2 needs a block device to function — just like your laptop can’t boot from Google Drive!
Databases require low-latency, small read/writes (e.g., updating a few bytes in a record).
S3 doesn’t support partial file edits — you’d have to re-upload the whole file.

In short:
EBS is used when your application or OS needs fast, random access to data — like a disk.



3. -> AWS Elastic File Storage:
EFS = File storage that multiple EC2 instances can share.

👉 Think of it like a shared network folder that all your servers can open and use together.

What type of data is stored in EFS?
Shared config files
Web content (images, scripts) used by many servers
Application data shared by multiple EC2 instances
Home directories or project files in a team environment

Why EFS (and not S3)?
Apps expect file system access (like /mnt/data/file.txt)
You can read/write/update files instantly from multiple EC2s simultaneously
S3 isn’t a mounted file system — it’s object storage (you upload/download whole files via API, not open/edit like a drive)

In short:

EFS is used when multiple servers need shared, live file access — like a LAN network drive.


------------------
How S3, EBS AND EFS are there? why can't S3  be used , why we need EFS , EBS?
inke purposes alag hain.

| Layer   | What You See                      | What AWS Does Behind the Scenes                                                |
| ------- | --------------------------------- | ------------------------------------------------------------------------------ |
| **EBS** | You attach a “volume” to your EC2 | Stores your data on a specific SSD in one AZ                                   |
| **EFS** | You mount a shared folder         | Stores data on distributed NAS systems across AZs                              |
| **S3**  | You upload files to a bucket      | Spreads and replicates your data across many servers and disks in multiple AZs |


Each AWS storage service exists for different access patterns:

S3 → Best for storing and retrieving whole files (no edits in place).

EBS → Best for apps and databases that read/write small parts of data constantly.

EFS → Best for many servers needing shared access to files in real time.



| Service | Think of it as                  | How you use it                   |
| ------- | ------------------------------- | -------------------------------- |
| **EBS** | Hard drive inside your computer | Save and modify files constantly |
| **EFS** | Office shared drive             | Everyone accesses same files     |
| **S3**  | Dropbox or Google Drive         | Upload/download full files only  |



