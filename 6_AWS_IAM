AWS - IAM - Idenity and access management

AWS Identity and Access Management (IAM) is an AWS service that helps you manage access to your AWS account and resources. It also provides a centralized view of who 
and what are allowed inside your AWS account (authentication), and who and what have permissions to use and work with your AWS resources (authorization).


IAM user - Created directly inside AWS system. Username and password hote hain, this verifies our identity.

We give IAM policy to IAM user -> To manage access and provide permissions to AWS services and resources, you create IAM policies and attach them to an IAM identity.
Whenever an IAM identity makes a request, AWS evaluates the policies associated with them.
jo ki define karta hai ki kya action allowed hai kya nahin kis resource ko..
{
"Version": "2012-10-17",
"Statement": [{
"Effect": "Allow",
"Action": "*",
"Resource": "*"
}]
}


Now, creating users in AWS is easy and manageable if we have few, but let say we to create thousands of users then it becomes tedious to manage,
ki kis user ko kya permission hai, fir usko role change hua for uski permissions edit karo and company se leave hua fir usko hatao. Usko koi aur let say developer ko kpi aur kaam bhi
karwana hai fir vo permission de, itne sab logon mein ye manage karna bahut mushkil ho jaayga


IAM groups: It is collection of users.
Isliye groups aay, ki user groups banado, inpe attach kardo IAM policies which defines ki is group ko kaunse AWS resources ke actions ki permission hai kisko nahin..
toh koi bhi let say developer add hua, us user ko developer group mein add kardo, same permissions lag jaayngi..
Kisiko Networking group mein add kia, usko vo permissions mil kaayngi..
Easier to manage aise 
For example, if you have a developer inside the developers group who makes a request to an AWS service, AWS evaluates any policies attached to the developers group and any policies attached to the developer user to determine if the request should be allowed or denied.


->Think of “User” and “Role” as Identities, and “Policy” as Permissions

IAM User → Permanent human
Created manually inside AWS.
Has username + password / access keys.
Used for direct logins by people.

🤖 IAM Role → Temporary identity
Not tied to a single person.
Can be “assumed” by trusted entities: EC2, Lambda, or even external users via federation.
Has no permanent credentials — AWS gives temporary keys each time.



Jaise EC2 instance wants to request read/Write with S3, now since they are all aws resources inside aws ssytem does not mean it can directly call them. The request needs to be
signed authenticated then only requst serve hogi.This signing process happens programmatically and allows AWS to verify your identity when a request is made and run through various security
processes to ensure a request is legit.


Let say EC2 instance ke liye ek role banaya and usko IAM policy de dete hain ki isko S3 ka read write access dedo,
Now jab ec2 will connect with s3, toh ek tarah se temporary credentials to verify the identity.

IAM roles are identities in AWS that like an IAM user also have associated AWS credentials used to sign requests. However, IAM users have usernames and passwords 
as well as static credentials whereas IAM roles do not have any login credentials like a username and password and the credentials used to sign requests 
are programmatically acquired, temporary in nature, and automatically rotated

->Consider using an Idenity provider
Abhi toh kya hota hai if we create IAM user iske credentials AWS system mein store hote hain..ab koi company chodke jaata hai toh yahan se hatao.
Ya fir let say ki 10 users hain..but we have different groups with different permissions ie.. developers, testing, production.
Now, agar IAM user banaya toh 30 users creds banane pad jaaynge..same user ke 3 creds for different groups and their permissions.
This when becomes larger number of users, becomes too difficult to maintain. Users also have to manage their multiple creds of different types of groups.

Isse achha identity provider system use karo
An Identity Provider (IdP) is just a system that stores and manages user identities — like:

Google Workspace (your company’s Gmail login)
Microsoft Entra ID (formerly Azure AD)
Okta
Or even AWS IAM Identity Center

So, the IdP is basically your company’s employee directory + login system.

Now, jo bhi employee login karega, vo validate ho jaayga ki ye sahi hai

Step 2. What is IAM Identity Center (the simple version)

Think of AWS IAM Identity Center (IIC) as a login manager for your organization in AWS.
It’s like a “control room” where you manage who can log in, and what they can do — across all your AWS accounts.

🪪 Example:

Let’s say your company has:
AWS Account 1: Development
AWS Account 2: Production

10 employees
You go to IAM Identity Center, and you add users (e.g., Pragati, Riya, Raj) and groups (like “Developers”, “Admins”).
Har group mein user ko baar baar daalne ki bajay..  har user ko ek baar banaya and usko group se associate kar dia, and us group ki kuch permissions hain vo isko mil gai

Then in IAM Identity Center, you say:
“Developers can access the Development account with limited permissions.”
“Admins can access Production account with full permissions.”

Now when Pragati logs in, she sees both accounts, and chooses which one to open — no need to have separate IAM users created inside those AWS accounts.

✅ Central login
✅ Central user management
✅ No multiple passwords
✅ Automatically uses roles behind the scenes

Now, is tarah se multiple creds ni banane pade for aws accounts for same user.
Na user ko maintain karna pad raha hai creds for multiple aws accounts access.


--> Step 5. What is Federation (the key concept)

Federation = the trust link between two systems.

It’s what lets AWS say:

“I trust this other system to log people in and tell me who they are.”

So, Federation is just the mechanism that connects your Identity Provider (IdP) and AW
